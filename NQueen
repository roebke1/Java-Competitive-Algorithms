//A simple program to find a position for a queen on a chessboard of size n for each row such that each queen is not threatened by another queen.
// Run time will be O(n!) so it's very slow....

class Main {
    public static boolean isNotThreatened(int[][] board, int n, int x, int y) {
        //column
        for (int k = 0; k < y; k++) {
            if (board[x][k] == 1) {
               return false;
            }
        }
    
        //left diag
        int i = x;
        int j = y;
        while (i >= 0 && j >= 0) {
            if (board[i--][j--] == 1) {
                return false;
            }
        }
    
        //right diag
        i = x;
        j = y;
        while (i < n && j >= 0){
            if (board[i++][j--] == 1) {
                return false;
            }
        }
        return true;
    }
        
    public static void printBoard(int n, int[][] board) {
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // This procedure finds the first solution to the problem and then prints out the
    // board representing the solution.
    public static boolean solveFirstNQueen(int n, int[][] board, int j) {
        //base case
        if (j == n) {
            //print the board
            printBoard(n, board);
            return true;
        }
        //rec case
        //try to place a queen in every row
        for (int i = 0; i < n; i++) {
            if (isNotThreatened(board, n, i, j)) {
                board[i][j] = 1;
                if (solveFirstNQueen(n, board, j + 1)) {
                    return true;
                }
                board[i][j] = 0;  
            }
        }
        return false;
    }

    // This procedure counts all solutions to the problem and then prints out the
    // board representing each solution.
    public static int solveAllNQueen(int n, int[][] board, int j) {
        //base case
        if (j == n) {
            //print the board
            printBoard(n, board);
            return 1;
        }
        //rec case
        //try to place a queen in every row
        int ways = 0;
        for (int i = 0; i < n; i++) {
            if (isNotThreatened(board, n, i, j)) {
                board[i][j] = 1;
                ways += solveAllNQueen(n, board, j + 1);
                board[i][j] = 0;  
            }
        }
        return ways;
    }

    public static void main(String[] args) {
        int[][] board = new int[20][20];
        int n = 4;
        //solveFirstNQueen(n, board, 0);
        System.out.println("Ways solution is solvable: " + solveAllNQueen(n, board, 0));
    }
}
