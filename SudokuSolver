// Given a partially filled Sudoku Matrix of size 9 by 9, write a function to complete the puzzle 
// using Sudoku rules.  Input: 2-D Matrix  Output Solved 2-D Matrix

public class SudokoSolver {
    public static boolean isSafe(int[][] mat, int i, int j, int number, int n) {
        // check for both row and column
        for (int k = 0; k < n; k++) {
            if ((mat[k][j] == number) || (mat[i][k] == number)) {
                return false;
            }
        }
        // check for subgrid
        //Find the upper left cell of the quadrant
        int sx = (i/3) * 3;
        int sy = (j/3) * 3;

        for (int x = sx; x < sx + 3; x++) {
            for (int y = sy; y < sy + 3; y++) {
                if (mat[x][y] == number) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean solveSudoku(int[][] mat, int i, int j, int n) {
        //base case
        if (i == n) {
            //print the solution
            for (int x = 0; x < 9; x++) {
                for (int y = 0; y < 9; y++) {
                    System.out.print(mat[x][y]);
                }
                System.out.println();
            }

            return true;
        }
        //rec case
        if (j == n) {
            return solveSudoku(mat, i + 1, 0, n);
        }

        // skip the prefilled cell
        if (mat[i][j] != 0) {
            return solveSudoku(mat, i, j + 1, n);
        }

        //cell to be filled
        //try out each possibility
        for (int number = 1; number <= n; number++) {
            if (isSafe(mat, i, j, number, n)) {
                mat[i][j] = number;

                if (solveSudoku(mat, i, j + 1, n)) {
                    return true;
                }
            }
        }

        // if no number works
        mat[i][j] = 0;
        return false;
    }
    public static void main(String[] args) {
        int n = 9;
        int[][] mat = {{0,0,0,0,5,0,8,0,0},
                {0,0,7,0,0,1,6,0,0},
                {0,0,0,7,0,2,0,3,0},
                {0,0,8,0,0,0,0,0,0},
                {0,0,0,2,9,0,3,7,0},
                {4,0,0,0,0,0,0,0,5},
                {8,0,2,0,0,7,0,0,0},
                {0,4,0,0,3,0,0,1,8},
                {0,0,6,0,0,0,0,0,0}};

        if (!solveSudoku(mat,0,0,n)) {
            System.out.println("No solution exists");
        }
    }
}
